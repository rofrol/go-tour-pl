Pakiety, zmienne i funkcje.
Naucz się podstawowych komponentów typowego programu go.

Autorzy Go
http://golang.org

* Pakiety

Każdy program Go jest zrobiony z pakietów.

Programy są uruchamiane w pakiecie `main`.

Ten program używa pakietów ze ścieżkami importu `"fmt"` i `"math/rand"`.

Zgodnie z konwencją, nazwa pakietu jest taka sama jak ostatni element ścieżki importu. Na przykład, pakiet `"math/rand"` zawiera pliki które zaczynają się wyrażeniem `package`rand`.

#appengine: *Nota:* środowisko w którym tee programy są uruchamiane jest
#appengine: deterministyczne, tak więc `rand.Intn` zawsze zwróci tą samą liczbę.
#appengine:
#appengine: (Aby zobaczyć inną liczbę, zainicjuj generator liczb; zobacz [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].)

.play basics/packages.go

* Importy

Ten kod grupuje importy w wyrażenie importujące z nawiasami.

Możesz również pisać wiele wyrażeń importujących:

	import "fmt"
	import "math"

Ale w dobrym stylu jest użycie wyrażenia importującego z nawiasami.

.play basics/imports.go

* Wyeksportowane nazwy

Po zaimportowaniu pakietu możesz się odnosić do nazw, które on eskportuje.

W Go nazwa jest eksportowana jeśli zaczyna się dużą literą.

`Foo` jest wyeksportowaną nazwą, tak samo jak `FOO`. Nazwa `foo` nie jest wyeksportowana.

Uruchom kod. Następnie zmień nazwę `math.pi` na `math.Pi` i spróbuj jeszcze raz.

.play basics/exported-names.go

* Funkcje

Funkcja może przyjąć zero lub więcej argumentów.

W tym przykładzie `add` przyjmuje dwa parametry typu `int`.

Zauważ, że typ znajduje się _za_ nazwą zmiennej.

(Aby dowiedzieć się więcej dlaczego typy wyglądają jak wyglądają, zobacz [[http://golang.org/doc/articles/gos_declaration_syntax.html][artykuł o składni deklaracji Go]].)

.play basics/functions.go

* Ciąg dalszy funkcji

Kiedy dwa następujące po sobie nazwane parametry funkcji współdzielą typ, możesz ominąć typ ze wszystkich oprócz ostatniego.

W tym przykładzie skróciliśmy

	x int, y int

do

	x, y int

.play basics/functions-continued.go

* Wiele wartości zwracanych

Funkcja może zwrócić dowolną liczbę wartości zwracanych.

Funkcja `swap` zwraca dwa napisy.

.play basics/multiple-results.go

* Nazwwane wartości zwracane

Zwracane wartości w Go mogą być nazwane i zachowywaćsię tak jak zmienne.

These names should be used to document the meaning of the return values.

A `return` statement without arguments returns the current values of the results. This is known as a "naked" return.

Naked return statements should be used only in short function, as with the example shown here. They can harm readability in longer functions.

.play basics/named-results.go

* Variables

The `var` statement declares a list of variables; as in function argument lists, the type is last.

A `var` statement can be at package or function level. We see both in this example.

.play basics/variables.go

* Variables with initializers

A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

.play basics/variables-with-initializers.go

* Short variable declarations

Inside a function, the `:=` short assignment statement can be used in place of a `var` declaration with implicit type.

Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available.

.play basics/short-variable-declarations.go

* Basic types

Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

The example shows variables of several types,
and also that variable declarations may be "factored" into blocks,
as with import statements.

.play basics/basic-types.go

* Zero values

Variables declared without an explicit initial value are given their
_zero_value_.

The zero value is:

- `0` for numeric types,
- `false` the boolean type, and
- `""` (the empty string) for strings.

.play basics/zero.go

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Or, put more simply:

	i := 42
	f := float64(i)
	u := uint(f)

Unlike in C, in Go assignment between items of different type requires an
explicit conversion.
Try removing the `float64` or `int` conversions in the example and see what happens.

.play basics/type-conversions.go

* Type inference

When declaring a variable without specifying its type (using `var` without a type or the `:=` syntax), the variable's type is _inferred_ from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

	var i int
	j := i // j is an int

But when the right hand side contains an untyped numeric constant, the new variable may be an `int`, `float64`, or `complex128` depending on the precision of the constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Try changing the initial value of `v` in the example code and observe how its type is affected.

.play basics/type-inference.go

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the `:=` syntax.

.play basics/constants.go

* Numeric Constants

Numeric constants are high-precision _values_.

An untyped constant takes the type needed by its context.

Try printing `needInt(Big)` too.

.play basics/numeric-constants.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
